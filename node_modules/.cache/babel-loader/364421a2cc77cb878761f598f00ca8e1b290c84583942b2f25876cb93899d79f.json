{"ast":null,"code":"// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  let nextNodesStack = [startNode];\n  while (nextNodesStack.length) {\n    const currentNode = nextNodesStack.shift();\n    if (currentNode === finishNode) return visitedNodesInOrder;\n    if (!currentNode.isWall && (currentNode.isStart || !currentNode.isVisited)) {\n      currentNode.isVisited = true;\n      visitedNodesInOrder.push(currentNode);\n      const {\n        col,\n        row\n      } = currentNode;\n      let nextNode;\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n    }\n  }\n  // return visitedNodesInOrder;\n}","map":{"version":3,"names":["bfs","grid","startNode","finishNode","visitedNodesInOrder","nextNodesStack","length","currentNode","shift","isWall","isStart","isVisited","push","col","row","nextNode","previousNode"],"sources":["/Users/buddy/Documents/GitHub/Pathfinding-Simulator/src/algorithms/bfs.js"],"sourcesContent":["// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  let nextNodesStack = [startNode];\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.shift();\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n      const {col, row} = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // return visitedNodesInOrder;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EAC/C,MAAMC,mBAAmB,GAAG,EAAE;EAC9B,IAAIC,cAAc,GAAG,CAACH,SAAS,CAAC;EAChC,OAAOG,cAAc,CAACC,MAAM,EAAE;IAC5B,MAAMC,WAAW,GAAGF,cAAc,CAACG,KAAK,EAAE;IAC1C,IAAID,WAAW,KAAKJ,UAAU,EAAE,OAAOC,mBAAmB;IAE1D,IACE,CAACG,WAAW,CAACE,MAAM,KAClBF,WAAW,CAACG,OAAO,IAAI,CAACH,WAAW,CAACI,SAAS,CAAC,EAC/C;MACAJ,WAAW,CAACI,SAAS,GAAG,IAAI;MAC5BP,mBAAmB,CAACQ,IAAI,CAACL,WAAW,CAAC;MACrC,MAAM;QAACM,GAAG;QAAEC;MAAG,CAAC,GAAGP,WAAW;MAC9B,IAAIQ,QAAQ;MACZ,IAAID,GAAG,GAAG,CAAC,EAAE;QACXC,QAAQ,GAAGd,IAAI,CAACa,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC;QAC7B,IAAI,CAACE,QAAQ,CAACJ,SAAS,EAAE;UACvBI,QAAQ,CAACC,YAAY,GAAGT,WAAW;UACnCF,cAAc,CAACO,IAAI,CAACG,QAAQ,CAAC;QAC/B;MACF;MACA,IAAID,GAAG,GAAGb,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;QACzBS,QAAQ,GAAGd,IAAI,CAACa,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC;QAC7B,IAAI,CAACE,QAAQ,CAACJ,SAAS,EAAE;UACvBI,QAAQ,CAACC,YAAY,GAAGT,WAAW;UACnCF,cAAc,CAACO,IAAI,CAACG,QAAQ,CAAC;QAC/B;MACF;MACA,IAAIF,GAAG,GAAG,CAAC,EAAE;QACXE,QAAQ,GAAGd,IAAI,CAACa,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC;QAC7B,IAAI,CAACE,QAAQ,CAACJ,SAAS,EAAE;UACvBI,QAAQ,CAACC,YAAY,GAAGT,WAAW;UACnCF,cAAc,CAACO,IAAI,CAACG,QAAQ,CAAC;QAC/B;MACF;MACA,IAAIF,GAAG,GAAGZ,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,GAAG,CAAC,EAAE;QAC5BS,QAAQ,GAAGd,IAAI,CAACa,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC;QAC7B,IAAI,CAACE,QAAQ,CAACJ,SAAS,EAAE;UACvBI,QAAQ,CAACC,YAAY,GAAGT,WAAW;UACnCF,cAAc,CAACO,IAAI,CAACG,QAAQ,CAAC;QAC/B;MACF;IACF;EACF;EACA;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}