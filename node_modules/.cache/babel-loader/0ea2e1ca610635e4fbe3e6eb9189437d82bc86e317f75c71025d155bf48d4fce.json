{"ast":null,"code":"import _objectSpread from\"/Users/buddy/Documents/GitHub/Pathfinding-Simulator/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _createForOfIteratorHelper from\"/Users/buddy/Documents/GitHub/Pathfinding-Simulator/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _classCallCheck from\"/Users/buddy/Documents/GitHub/Pathfinding-Simulator/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/buddy/Documents/GitHub/Pathfinding-Simulator/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/buddy/Documents/GitHub/Pathfinding-Simulator/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/buddy/Documents/GitHub/Pathfinding-Simulator/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/buddy/Documents/GitHub/Pathfinding-Simulator/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import Node from'./Node/Node';import{dijkstra}from'../algorithms/dijkstra';import{AStar}from'../algorithms/aStar';import{dfs}from'../algorithms/dfs';import{bfs}from'../algorithms/bfs';import'./PathfindingVisualizer.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PathfindingVisualizer=/*#__PURE__*/function(_Component){_inherits(PathfindingVisualizer,_Component);var _super=_createSuper(PathfindingVisualizer);function PathfindingVisualizer(){var _this;_classCallCheck(this,PathfindingVisualizer);_this=_super.call(this);_this.getInitialGrid=function(){var rowCount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:_this.state.ROW_COUNT;var colCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_this.state.COLUMN_COUNT;var initialGrid=[];for(var row=0;row<rowCount;row++){var currentRow=[];for(var col=0;col<colCount;col++){currentRow.push(_this.createNode(row,col));}initialGrid.push(currentRow);}return initialGrid;};_this.createNode=function(row,col){return{row:row,col:col,isStart:row===_this.state.START_NODE_ROW&&col===_this.state.START_NODE_COL,isFinish:row===_this.state.FINISH_NODE_ROW&&col===_this.state.FINISH_NODE_COL,distance:Infinity,distanceToFinishNode:Math.abs(_this.state.FINISH_NODE_ROW-row)+Math.abs(_this.state.FINISH_NODE_COL-col),isVisited:false,isWall:false,previousNode:null,isNode:true};};_this.state={grid:[],START_NODE_ROW:5,FINISH_NODE_ROW:5,START_NODE_COL:5,FINISH_NODE_COL:15,mouseIsPressed:false,ROW_COUNT:25,COLUMN_COUNT:35,MOBILE_ROW_COUNT:10,MOBILE_COLUMN_COUNT:20,isRunning:false,isStartNode:false,isFinishNode:false,isWallNode:false,// xxxxxxx\ncurrRow:0,currCol:0,isDesktopView:true};_this.handleMouseDown=_this.handleMouseDown.bind(_assertThisInitialized(_this));_this.handleMouseLeave=_this.handleMouseLeave.bind(_assertThisInitialized(_this));_this.toggleIsRunning=_this.toggleIsRunning.bind(_assertThisInitialized(_this));return _this;}_createClass(PathfindingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){var grid=this.getInitialGrid();this.setState({grid:grid});}},{key:\"toggleIsRunning\",value:function toggleIsRunning(){this.setState({isRunning:!this.state.isRunning});}},{key:\"toggleView\",value:function toggleView(){if(!this.state.isRunning){this.clearGrid();this.clearWalls();var isDesktopView=!this.state.isDesktopView;var grid;if(isDesktopView){grid=this.getInitialGrid(this.state.ROW_COUNT,this.state.COLUMN_COUNT);this.setState({isDesktopView:isDesktopView,grid:grid});}else{if(this.state.START_NODE_ROW>this.state.MOBILE_ROW_COUNT||this.state.FINISH_NODE_ROW>this.state.MOBILE_ROW_COUNT||this.state.START_NODE_COL>this.state.MOBILE_COLUMN_COUNT||this.state.FINISH_NODE_COL>this.state.MOBILE_COLUMN_COUNT){alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');}else{grid=this.getInitialGrid(this.state.MOBILE_ROW_COUNT,this.state.MOBILE_COLUMN_COUNT);this.setState({isDesktopView:isDesktopView,grid:grid});}}}}},{key:\"handleMouseDown\",value:function handleMouseDown(row,col){if(!this.state.isRunning){if(this.isGridClear()){if(document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className==='node node-start'){this.setState({mouseIsPressed:true,isStartNode:true,currRow:row,currCol:col});}else if(document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className==='node node-finish'){this.setState({mouseIsPressed:true,isFinishNode:true,currRow:row,currCol:col});}else{var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid,mouseIsPressed:true,isWallNode:true,currRow:row,currCol:col});}}else{this.clearGrid();}}}},{key:\"isGridClear\",value:function isGridClear(){var _iterator=_createForOfIteratorHelper(this.state.grid),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var row=_step.value;var _iterator2=_createForOfIteratorHelper(row),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var node=_step2.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName==='node node-visited'||nodeClassName==='node node-shortest-path'){return false;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return true;}},{key:\"handleMouseEnter\",value:function handleMouseEnter(row,col){if(!this.state.isRunning){if(this.state.mouseIsPressed){var nodeClassName=document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className;if(this.state.isStartNode){if(nodeClassName!=='node node-wall'){var prevStartNode=this.state.grid[this.state.currRow][this.state.currCol];prevStartNode.isStart=false;document.getElementById(\"node-\".concat(this.state.currRow,\"-\").concat(this.state.currCol)).className='node';this.setState({currRow:row,currCol:col});var currStartNode=this.state.grid[row][col];currStartNode.isStart=true;document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node node-start';}this.setState({START_NODE_ROW:row,START_NODE_COL:col});}else if(this.state.isFinishNode){if(nodeClassName!=='node node-wall'){var prevFinishNode=this.state.grid[this.state.currRow][this.state.currCol];prevFinishNode.isFinish=false;document.getElementById(\"node-\".concat(this.state.currRow,\"-\").concat(this.state.currCol)).className='node';this.setState({currRow:row,currCol:col});var currFinishNode=this.state.grid[row][col];currFinishNode.isFinish=true;document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node node-finish';}this.setState({FINISH_NODE_ROW:row,FINISH_NODE_COL:col});}else if(this.state.isWallNode){var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid});}}}}},{key:\"handleMouseUp\",value:function handleMouseUp(row,col){if(!this.state.isRunning){this.setState({mouseIsPressed:false});if(this.state.isStartNode){var isStartNode=!this.state.isStartNode;this.setState({isStartNode:isStartNode,START_NODE_ROW:row,START_NODE_COL:col});}else if(this.state.isFinishNode){var isFinishNode=!this.state.isFinishNode;this.setState({isFinishNode:isFinishNode,FINISH_NODE_ROW:row,FINISH_NODE_COL:col});}this.getInitialGrid();}}},{key:\"handleMouseLeave\",value:function handleMouseLeave(){if(this.state.isStartNode){var isStartNode=!this.state.isStartNode;this.setState({isStartNode:isStartNode,mouseIsPressed:false});}else if(this.state.isFinishNode){var isFinishNode=!this.state.isFinishNode;this.setState({isFinishNode:isFinishNode,mouseIsPressed:false});}else if(this.state.isWallNode){var isWallNode=!this.state.isWallNode;this.setState({isWallNode:isWallNode,mouseIsPressed:false});this.getInitialGrid();}}},{key:\"clearGrid\",value:function clearGrid(){if(!this.state.isRunning){var newGrid=this.state.grid.slice();var _iterator3=_createForOfIteratorHelper(newGrid),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var row=_step3.value;var _iterator4=_createForOfIteratorHelper(row),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var node=_step4.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'&&nodeClassName!=='node node-wall'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node';node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=Math.abs(this.state.FINISH_NODE_ROW-node.row)+Math.abs(this.state.FINISH_NODE_COL-node.col);}if(nodeClassName==='node node-finish'){node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=0;}if(nodeClassName==='node node-start'){node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=Math.abs(this.state.FINISH_NODE_ROW-node.row)+Math.abs(this.state.FINISH_NODE_COL-node.col);node.isStart=true;node.isWall=false;node.previousNode=null;node.isNode=true;}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}}},{key:\"clearWalls\",value:function clearWalls(){if(!this.state.isRunning){var newGrid=this.state.grid.slice();var _iterator5=_createForOfIteratorHelper(newGrid),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var row=_step5.value;var _iterator6=_createForOfIteratorHelper(row),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var node=_step6.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName==='node node-wall'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node';node.isWall=false;}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}}}},{key:\"visualize\",value:function visualize(algo){if(!this.state.isRunning){this.clearGrid();this.toggleIsRunning();var grid=this.state.grid;var startNode=grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];var finishNode=grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];var visitedNodesInOrder;switch(algo){case'Dijkstra':visitedNodesInOrder=dijkstra(grid,startNode,finishNode);break;case'AStar':visitedNodesInOrder=AStar(grid,startNode,finishNode);break;case'BFS':visitedNodesInOrder=bfs(grid,startNode,finishNode);break;case'DFS':visitedNodesInOrder=dfs(grid,startNode,finishNode);break;default:// should never get here\nbreak;}var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);nodesInShortestPathOrder.push('end');this.animate(visitedNodesInOrder,nodesInShortestPathOrder);}}},{key:\"animate\",value:function animate(visitedNodesInOrder,nodesInShortestPathOrder){var _this2=this;var _loop=function _loop(i){if(i===visitedNodesInOrder.length){setTimeout(function(){_this2.animateShortestPath(nodesInShortestPathOrder);},10*i);return{v:void 0};}setTimeout(function(){var node=visitedNodesInOrder[i];var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-visited';}},10*i);};for(var i=0;i<=visitedNodesInOrder.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}},{key:\"animateShortestPath\",value:function animateShortestPath(nodesInShortestPathOrder){var _this3=this;var _loop2=function _loop2(i){if(nodesInShortestPathOrder[i]==='end'){setTimeout(function(){_this3.toggleIsRunning();},i*50);}else{setTimeout(function(){var node=nodesInShortestPathOrder[i];var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-shortest-path';}},i*40);}};for(var i=0;i<nodesInShortestPathOrder.length;i++){_loop2(i);}}},{key:\"render\",value:function render(){var _this4=this;var _this$state=this.state,grid=_this$state.grid,mouseIsPressed=_this$state.mouseIsPressed;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"nav\",{className:\"navbar navbar-expand-lg navbar-dark bg-dark \",children:[/*#__PURE__*/_jsx(\"a\",{className:\"navbar-brand\",href:\"/\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"PathFinding Visualizer\"})}),/*#__PURE__*/_jsx(\"button\",{className:\"navbar-toggler\",type:\"button\",\"data-toggle\":\"collapse\",\"data-target\":\"#navbarNav\",\"aria-controls\":\"navbarNav\",\"aria-expanded\":\"false\",\"aria-label\":\"Toggle navigation\",children:/*#__PURE__*/_jsx(\"span\",{className:\"navbar-toggler-icon\"})})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-danger\",onClick:function onClick(){return _this4.clearGrid();},children:\"Clear Grid\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-warning\",onClick:function onClick(){return _this4.clearWalls();},children:\"Clear Walls\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary\",onClick:function onClick(){return _this4.visualize('Dijkstra');},children:\"Dijkstra's\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary\",onClick:function onClick(){return _this4.visualize('AStar');},children:\"A*\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary\",onClick:function onClick(){return _this4.visualize('BFS');},children:\"Bread First Search\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary\",onClick:function onClick(){return _this4.visualize('DFS');},children:\"Depth First Search\"}),this.state.isDesktopView?/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-light\",onClick:function onClick(){return _this4.toggleView();},children:\"Mobile View\"}):/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-dark\",onClick:function onClick(){return _this4.toggleView();},children:\"Desktop View\"}),/*#__PURE__*/_jsx(\"table\",{className:\"grid-container\",onMouseLeave:function onMouseLeave(){return _this4.handleMouseLeave();},children:/*#__PURE__*/_jsx(\"tbody\",{className:\"grid\",children:grid.map(function(row,rowIdx){return/*#__PURE__*/_jsx(\"tr\",{children:row.map(function(node,nodeIdx){var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return/*#__PURE__*/_jsx(Node,{col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseDown:function onMouseDown(row,col){return _this4.handleMouseDown(row,col);},onMouseEnter:function onMouseEnter(row,col){return _this4.handleMouseEnter(row,col);},onMouseUp:function onMouseUp(){return _this4.handleMouseUp(row,col);},row:row},nodeIdx);})},rowIdx);})})})]});}}]);return PathfindingVisualizer;}(Component);export{PathfindingVisualizer as default};var getNewGridWithWallToggled=function getNewGridWithWallToggled(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];if(!node.isStart&&!node.isFinish&&node.isNode){var newNode=_objectSpread(_objectSpread({},node),{},{isWall:!node.isWall});newGrid[row][col]=newNode;}return newGrid;};function getNodesInShortestPathOrder(finishNode){var nodesInShortestPathOrder=[];var currentNode=finishNode;while(currentNode!==null){nodesInShortestPathOrder.unshift(currentNode);currentNode=currentNode.previousNode;}return nodesInShortestPathOrder;}","map":{"version":3,"names":["React","Component","Node","dijkstra","AStar","dfs","bfs","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","row","currentRow","col","push","createNode","isStart","START_NODE_ROW","START_NODE_COL","isFinish","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","distanceToFinishNode","Math","abs","isVisited","isWall","previousNode","isNode","grid","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","className","newGrid","getNewGridWithWallToggled","node","nodeClassName","prevStartNode","currStartNode","prevFinishNode","currFinishNode","slice","algo","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","getNodesInShortestPathOrder","animate","i","length","setTimeout","animateShortestPath","visualize","toggleView","map","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","newNode","currentNode","unshift"],"sources":["/Users/buddy/Documents/GitHub/Pathfinding-Simulator/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {AStar} from '../algorithms/aStar';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {bfs} from '../algorithms/bfs';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 5,\r\n      FINISH_NODE_ROW: 5,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 15,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      MOBILE_ROW_COUNT: 10,\r\n      MOBILE_COLUMN_COUNT: 20,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n      isDesktopView: true,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  toggleView() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.clearWalls();\r\n      const isDesktopView = !this.state.isDesktopView;\r\n      let grid;\r\n      if (isDesktopView) {\r\n        grid = this.getInitialGrid(\r\n          this.state.ROW_COUNT,\r\n          this.state.COLUMN_COUNT,\r\n        );\r\n        this.setState({isDesktopView, grid});\r\n      } else {\r\n        if (\r\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\r\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n        ) {\r\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\r\n        } else {\r\n          grid = this.getInitialGrid(\r\n            this.state.MOBILE_ROW_COUNT,\r\n            this.state.MOBILE_COLUMN_COUNT,\r\n          );\r\n          this.setState({isDesktopView, grid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <h1>PathFinding Visualizer</h1>\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n        </nav>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          onClick={() => this.clearGrid()}>\r\n          Clear Grid\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning\"\r\n          onClick={() => this.clearWalls()}>\r\n          Clear Walls\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('Dijkstra')}>\r\n          Dijkstra's\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('AStar')}>\r\n          A*\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('BFS')}>\r\n          Bread First Search\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('DFS')}>\r\n          Depth First Search\r\n        </button>\r\n        {this.state.isDesktopView ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n            onClick={() => this.toggleView()}>\r\n            Mobile View\r\n          </button>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark\"\r\n            onClick={() => this.toggleView()}>\r\n            Desktop View\r\n          </button>\r\n        )}\r\n        <table\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <tbody className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}